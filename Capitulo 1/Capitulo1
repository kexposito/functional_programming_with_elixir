Capitulo 1

OI.puts "Hello, World!"
######################
iex(1)> list=[1,2,3,4]
# => [1, 2, 3, 4]
iex(2)> List.delete_at(list,-1)
# =>[1, 2, 3]
iex(3)> list ++ [1]
# =>[1, 2, 3, 4, 1]
iex(4)> IO.inspect list
# =>[1, 2, 3, 4]

#######################
# Funciones Anonimas ##
#######################

add2 = fn (n) -> n + 2 end
#Function<6.128620087/1 in :erl_eval.expr/5>   (mensaje que NO es error)
add2.(2)
# => 4

#######################
#Using Values Explicity
#######################
iex(9)> defmodule MySet do
...(9)> defstruct items: []
...(9)> def push(set = %{items: items}, item) do
...(9)> if Enum.member?(items, item) do
...(9)> set
...(9)> else
...(9)> %{set | items: items ++ [item]}
...(9)> end
...(9)> end
...(9)> end
{:module, MySet,
 <<70, 79, 82, 49, 0, 0, 7, 128, 66, 69, 65, 77, 65, 116, 85, 56, 0, 0, 0, 227,
   0, 0, 0, 26, 12, 69, 108, 105, 120, 105, 114, 46, 77, 121, 83, 101, 116, 8,
   95, 95, 105, 110, 102, 111, 95, 95, 7, ...>>, {:push, 2}}
iex(10)> set = %MySet{}
%MySet{items: []}
iex(11)> set=MySet.push(set,"apple")
%MySet{items: ["apple"]}
iex(12)> new_set=%MySet{}
%MySet{items: []}
iex(13)> new_set=MySet.push(new_set,"pie")
%MySet{items: ["pie"]}
iex(14)> IO.inspect MySet.push(set,"apple")
%MySet{items: ["apple"]}
%MySet{items: ["apple"]}
iex(15)> IO.inspect MySet.push(new_set,"apple")
%MySet{items: ["pie", "apple"]}
%MySet{items: ["pie", "apple"]}


#######################
## Using Function in ##
##### Arguments #######
#######################

iex(1)> Enum.map(["dogs", "cats" , "flowers"], &String.upcase/1)
# -> ["DOGS", "CATS", "FLOWERS"]

#######################
##### Transforming ####
####### Values ########
#######################
def capitalize_words(title) do
title
|> String.split
|> capitalize_all
|> join_with_whitespace
end

# toma una palabra "title" la convierte en una lista de palabras, la transforma  y luego las separa.

#######################
###### Declaring ######
######## Code #########
#######################

iex(2)> defmodule StringList do
...(2)> def upcase([]), do: []
...(2)> def upcase([first | rest]), do: [String.upcase(first) | upcase(rest)]
...(2)> end
{:module, StringList,
 <<70, 79, 82, 49, 0, 0, 4, 96, 66, 69, 65, 77, 65, 116, 85, 56, 0, 0, 0, 145,
   0, 0, 0, 14, 17, 69, 108, 105, 120, 105, 114, 46, 83, 116, 114, 105, 110,
   103, 76, 105, 115, 116, 8, 95, 95, 105, 110, ...>>, {:upcase, 1}}
iex(3)> StringList.upcase(["dogs","hot dogs", "bananas"])
# => ["DOGS", "HOT DOGS", "BANANAS"]

#### o usando 

list = ["dogs", "hot dogs", "bananas"]
Enum.map(list, &String.upcase/1)
# => ["DOGS", "HOT DOGS", "BANANAS"]